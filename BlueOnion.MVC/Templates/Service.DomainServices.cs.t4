<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#// assembly name="C:\Code\scaffold-net\DTNetScaffolder\DTNetScaffolder\bin\Debug\DTNetScaffolder.dll" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ parameter name="Model" type="DTNetScaffolder.TemplateViewModel" #>
/// This code was generated by DTNet Scaffolder.
// template: Service.DomainServices.cs
// class: <#= Model.Name #>
using ViewModel;
using ViewModel.Interfaces;
namespace Service
{

    public partial class DomainServices : IDomainServices
    {
		public IUtilityService UtilityService { get; private set; }
		 	
		<#

				foreach (var model in Model.AllModelTypes.OrderBy(x => x.Name))
				{
		#>
			public I<#= model.Name #>QueryService <#= model.Name #>QueryService { get; private set; }
					public I<#= model.Name #>CommandService <#= model.Name #>CommandService { get; private set; }
		<#
				}
		#>	

				public void InjectSelf()
        {
				<#

				foreach (var model in Model.AllModelTypes.OrderBy(x => x.Name))
				{
		#>
			            <#= model.Name #>QueryService.OtherServices = this;
			            <#= model.Name #>CommandService.OtherServices = this;
		<#
				}
		#>	
         
        }

        public DomainServices( IUtilityService utilityService,
        <#
			var index = Model.AllModelTypes.Length;
			foreach (var model in Model.AllModelTypes.OrderBy(x => x.Name))
			{
		#>  
			I<#= model.Name #>QueryService <#= Model.CamelCase(model.Name) #>QueryService,
            I<#= model.Name #>CommandService <#= Model.CamelCase(model.Name) #>CommandService<# index = index - 1; if (index > 0) { #> , <# } } #>
		)
        {
			UtilityService = utilityService;
		<#
				foreach (var model in Model.AllModelTypes.OrderBy(x => x.Name))
				{
		#>
			<#= model.Name #>QueryService = <#= Model.CamelCase(model.Name) #>QueryService;
            <#= model.Name #>CommandService = <#= Model.CamelCase(model.Name) #>CommandService;
		<#
				}
		#>
        }
    }
}