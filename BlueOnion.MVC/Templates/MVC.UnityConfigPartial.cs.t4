<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#// assembly name="C:\Code\scaffold-net\DTNetScaffolder\DTNetScaffolder\bin\Debug\DTNetScaffolder.dll" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ parameter name="Model" type="DTNetScaffolder.TemplateViewModel" #>
/// This code was generated by DTNet Scaffolder.
// template: MVC.UnityConfigPartial.cs
// class: <#= Model.Name #>
using Domain.Interfaces;
using MVC.Common;
using Microsoft.Practices.Unity;
using Repository;
using Service;
using Service.Command;
using Service.Query;
using ViewModel.Interfaces;

namespace MVC
{
    public static partial class UnityConfig
    {
	    private static void RegisterViewModelServices()
        {
		<#
			foreach (var model in Model.AllModelTypes.OrderBy(x => x.Name))
			{
		#>
	_container.RegisterType<I<#= model.Name #>ViewModelQueryService, <#= model.Name #>ViewModelQueryService>(new HttpContextDisposableLifetimeManager<<#= model.Name #>ViewModelQueryService>());
			_container.RegisterType<I<#= model.Name #>ViewModelCommandService, <#= model.Name #>ViewModelCommandService>(new HttpContextDisposableLifetimeManager<<#= model.Name #>ViewModelCommandService>());
		<#
			}
		#>
}
	    private static void RegisterDomainServices()
        {
		<#
			foreach (var model in Model.AllModelTypes.OrderBy(x => x.Name))
			{
		#>
    _container.RegisterType<I<#= model.Name #>QueryService, <#= model.Name #>QueryService>(new HttpContextDisposableLifetimeManager<<#= model.Name #>QueryService>(), ServicesInjectionMember());
            _container.RegisterType<I<#= model.Name #>CommandService, <#= model.Name #>CommandService>(new HttpContextDisposableLifetimeManager<<#= model.Name #>CommandService>(), ServicesInjectionMember());
		<#
			}
		#>
}
        private static void RegisterAgRepositories()
        {
		<#
			foreach (var model in Model.AllModelTypes.OrderBy(x => x.Name))
			{
		#>
	_container.RegisterType<I<#= model.Name #>Repository, <#= model.Name #>Repository>(new InjectionConstructor(typeof(IUser), typeof(IUnitOfWork), 1000));
		<#
			}
		#>
}
    }
}