<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#// assembly name="C:\Code\scaffold-net\DTNetScaffolder\DTNetScaffolder\bin\Debug\DTNetScaffolder.dll" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ parameter name="Model" type="DTNetScaffolder.TemplateViewModel" #>
/// This code was generated by DTNet Scaffolder.
// template: Service.ViewModelQueryService.cs
// class: <#= Model.Name #>
using System;
using System.Collections.Generic;
using System.Web.Http.OData.Query;
using AutoMapper;
using Domain.Interfaces;
using Domain.Model;
using Repository;

using ViewModel;
using ViewModel.Interfaces;

namespace Service.Query
{
    public class <#= Model.Name #>ViewModelQueryService : ViewModelQueryServiceBase<<#= Model.Name #>, <#= Model.Name #>ViewModel, <#= Model.Name #>Dto, <#= Model.Name #>DetailDto, I<#= Model.Name #>Repository, Guid>, I<#= Model.Name #>ViewModelQueryService
    {
        public <#= Model.Name #>ViewModelQueryService(IUnitOfWork unitOfWork, IUser user, IRepositoriesWrapper repositories, IDomainServices domainServices) 
			: base(unitOfWork, user, repositories, repositories.<#= Model.Name #>Repository, domainServices, 1000)
        {

        }

        public new <#= Model.Name #>ViewModel GetList(DateTime? effectiveDateTime = null)
        {
            var vm = base.GetList(effectiveDateTime);
            return vm;
        }

        public new <#= Model.Name #>ViewModel GetDetail(Guid id, DateTime? effectiveDateTime = null)
        {
            var vm = base.GetDetail(id,effectiveDateTime);
            return vm;
        }

		public <#= Model.Name #>ViewModel GetPage(ODataQueryOptions<<#= Model.Name #>> options, string search)
        {
            var vm = new <#= Model.Name #>ViewModel();

            var parameters = new ServiceQueryParameters<<#= Model.Name #>>
            {
                Options = options,
                Search = search
            };

            var listWithPageInfo = _repo.GetPage(parameters);
            vm.List = Mapper.Map<List<<#= Model.Name #>Dto>>(listWithPageInfo.List);
            vm.PageInfo = Mapper.Map<PageInfoDto>(listWithPageInfo.PageInfo);
			
            return vm;
        }
    }
}