<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.AspNet.Scaffolding.12.0, Version=12.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" #>
<#// assembly name="C:\Code\scaffold-net\DTNetScaffolder\DTNetScaffolder\bin\Debug\DTNetScaffolder.dll" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ parameter name="Model" type="DTNetScaffolder.TemplateViewModel" #>
/// This code was generated by DTNet Scaffolder.
// template: Repository.Repository.cs
// class: <#= Model.Name #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Http.OData.Query;
using Domain.Interfaces;
using Domain.Model;
using Repository.Repositories.Base;
namespace Repository
{
    public class <#= Model.Name #>Repository : AggregateRootBaseRepository<<#= Model.Name #>, Guid>, I<#= Model.Name #>Repository
    {
        public <#= Model.Name #>Repository(IUser user, IUnitOfWork unitOfWork, int limit = 1000)
            : base(user, unitOfWork, limit)
        {

        }

		public void SetCollectionsUnmodified(<#= Model.Name #> <#= Model.Name.ToLower() #>)
        {
            
        }

		public ListWithPageInfo<<#= Model.Name #>> GetPage(ServiceQueryParameters<<#= Model.Name #>> parameters)
        {
            var odataOptions = (ODataQueryOptions<<#= Model.Name #>>)parameters.Options;

            var dbset = string.IsNullOrWhiteSpace(parameters.Search) ?
                DbSet() :
                DbSet()
               .Where(p =>
                   1 == 0
				   <#foreach(var p in Model.Meta.Properties) 
		{ #>
		|| p.<#=p.PropertyName#>.ToString().Contains(parameters.Search)
		<#	
		}#>
                );

            var listWithPageInfo = GetListWithPageInfo(odataOptions, dbset);
            return listWithPageInfo;
        }
		
        protected static ListWithPageInfo<<#= Model.Name #>> GetListWithPageInfo(ODataQueryOptions<<#= Model.Name #>> odataOptions, IQueryable<<#= Model.Name #>> dbset)
        {
            return new ListWithPageInfo<<#= Model.Name #>>(
                odataOptions.ApplyTo(dbset).Cast<<#= Model.Name #>>().ToList(),
                odataOptions.Top.Value,
                odataOptions.Skip.Value,
                GetODataCount(odataOptions)
            );
        }
    }
}